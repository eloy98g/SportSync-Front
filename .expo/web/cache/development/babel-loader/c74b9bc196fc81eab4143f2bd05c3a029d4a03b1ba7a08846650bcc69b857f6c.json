{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { CodedError, Platform } from 'expo-modules-core';\nimport FontObserver from 'fontfaceobserver';\nimport { FontDisplay } from \"./Font.types\";\nfunction getFontFaceStyleSheet() {\n  if (!Platform.isDOMAvailable) {\n    return null;\n  }\n  var styleSheet = getStyleElement();\n  return styleSheet.sheet ? styleSheet.sheet : null;\n}\nfunction getFontFaceRules() {\n  var sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    var rules = _toConsumableArray(sheet.cssRules);\n    var items = [];\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({\n          rule: rule,\n          index: i\n        });\n      }\n    }\n    return items;\n  }\n  return [];\n}\nfunction getFontFaceRulesMatchingResource(fontFamilyName, options) {\n  var rules = getFontFaceRules();\n  return rules.filter(function (_ref) {\n    var rule = _ref.rule;\n    return rule.style.fontFamily === fontFamilyName && (options && options.display ? options.display === rule.style.fontDisplay : true);\n  });\n}\nvar serverContext = new Set();\nfunction getHeadElements() {\n  var entries = _toConsumableArray(serverContext.entries());\n  if (!entries.length) {\n    return [];\n  }\n  var css = entries.map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n      css = _ref3[0].css;\n    return css;\n  }).join('\\n');\n  var links = entries.map(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 1),\n      resourceId = _ref5[0].resourceId;\n    return resourceId;\n  });\n  return [{\n    $$type: 'style',\n    children: css,\n    id: ID,\n    type: 'text/css'\n  }].concat(_toConsumableArray(links.map(function (resourceId) {\n    return {\n      $$type: 'link',\n      rel: 'preload',\n      href: resourceId,\n      as: 'font',\n      crossorigin: ''\n    };\n  })));\n}\nexport default {\n  get name() {\n    return 'ExpoFontLoader';\n  },\n  unloadAllAsync: function () {\n    var _unloadAllAsync = _asyncToGenerator(function* () {\n      if (!Platform.isDOMAvailable) return;\n      var element = document.getElementById(ID);\n      if (element && element instanceof HTMLStyleElement) {\n        document.removeChild(element);\n      }\n    });\n    function unloadAllAsync() {\n      return _unloadAllAsync.apply(this, arguments);\n    }\n    return unloadAllAsync;\n  }(),\n  unloadAsync: function () {\n    var _unloadAsync = _asyncToGenerator(function* (fontFamilyName, options) {\n      var sheet = getFontFaceStyleSheet();\n      if (!sheet) return;\n      var items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n      for (var item of items) {\n        sheet.deleteRule(item.index);\n      }\n    });\n    function unloadAsync(_x, _x2) {\n      return _unloadAsync.apply(this, arguments);\n    }\n    return unloadAsync;\n  }(),\n  getServerResources: function getServerResources() {\n    var elements = getHeadElements();\n    return elements.map(function (element) {\n      switch (element.$$type) {\n        case 'style':\n          return `<style id=\"${element.id}\" type=\"${element.type}\">${element.children}</style>`;\n        case 'link':\n          return `<link rel=\"${element.rel}\" href=\"${element.href}\" as=\"${element.as}\" crossorigin=\"${element.crossorigin}\" />`;\n        default:\n          return '';\n      }\n    }).filter(Boolean);\n  },\n  resetServerContext: function resetServerContext() {\n    serverContext.clear();\n  },\n  isLoaded: function isLoaded(fontFamilyName) {\n    var _getFontFaceRulesMatc;\n    var resource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof window === 'undefined') {\n      return !!_toConsumableArray(serverContext.values()).find(function (asset) {\n        return asset.name === fontFamilyName;\n      });\n    }\n    return ((_getFontFaceRulesMatc = getFontFaceRulesMatchingResource(fontFamilyName, resource)) == null ? void 0 : _getFontFaceRulesMatc.length) > 0;\n  },\n  loadAsync: function loadAsync(fontFamilyName, resource) {\n    if (typeof window === 'undefined') {\n      serverContext.add({\n        name: fontFamilyName,\n        css: _createWebFontTemplate(fontFamilyName, resource),\n        resourceId: resource.uri\n      });\n      return Promise.resolve();\n    }\n    var canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new CodedError('ERR_WEB_ENVIRONMENT', `The browser's \\`document.head\\` element doesn't support injecting fonts.`);\n    }\n    var style = getStyleElement();\n    document.head.appendChild(style);\n    var res = getFontFaceRulesMatchingResource(fontFamilyName, resource);\n    if (!res.length) {\n      _createWebStyle(fontFamilyName, resource);\n    }\n    if (!isFontLoadingListenerSupported()) {\n      return Promise.resolve();\n    }\n    return new FontObserver(fontFamilyName, {\n      display: resource.display\n    }).load(null, 6000);\n  }\n};\nvar ID = 'expo-generated-fonts';\nfunction getStyleElement() {\n  var element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  var styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\nexport function _createWebFontTemplate(fontFamily, resource) {\n  return `@font-face{font-family:${fontFamily};src:url(${resource.uri});font-display:${resource.display || FontDisplay.AUTO}}`;\n}\nfunction _createWebStyle(fontFamily, resource) {\n  var fontStyle = _createWebFontTemplate(fontFamily, resource);\n  var styleElement = getStyleElement();\n  if (styleElement.styleSheet) {\n    var styleElementIE = styleElement;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;\n  } else {\n    var textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\nfunction isFontLoadingListenerSupported() {\n  var userAgent = window.navigator.userAgent;\n  var isIOS = !!userAgent.match(/iPad|iPhone/i);\n  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  var isEdge = userAgent.includes('Edge');\n  var isIE = userAgent.includes('Trident');\n  var isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}","map":{"version":3,"mappings":"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","names":["CodedError","Platform","FontObserver","FontDisplay","getFontFaceStyleSheet","isDOMAvailable","styleSheet","getStyleElement","sheet","getFontFaceRules","rules","cssRules","items","i","length","rule","CSSFontFaceRule","push","index","getFontFaceRulesMatchingResource","fontFamilyName","options","filter","style","fontFamily","display","fontDisplay","serverContext","Set","getHeadElements","entries","css","map","join","links","resourceId","$$type","children","id","ID","type","rel","href","as","crossorigin","name","unloadAllAsync","element","document","getElementById","HTMLStyleElement","removeChild","unloadAsync","item","deleteRule","getServerResources","elements","Boolean","resetServerContext","clear","isLoaded","resource","window","values","find","asset","loadAsync","add","_createWebFontTemplate","uri","Promise","resolve","canInjectStyle","head","appendChild","res","_createWebStyle","isFontLoadingListenerSupported","load","styleElement","createElement","AUTO","fontStyle","styleElementIE","cssText","textNode","createTextNode","userAgent","navigator","isIOS","match","isSafari","test","isEdge","includes","isIE","isFirefox"],"sources":["/Users/eloygomezgarcia/Desktop/PERSONAL/UNI/TFG/CODIGO/FRONT/node_modules/expo-font/src/ExpoFontLoader.web.ts"],"sourcesContent":["import { CodedError, Platform } from 'expo-modules-core';\nimport FontObserver from 'fontfaceobserver';\n\nimport { UnloadFontOptions } from './Font';\nimport { FontDisplay, FontResource } from './Font.types';\n\nfunction getFontFaceStyleSheet(): CSSStyleSheet | null {\n  if (!Platform.isDOMAvailable) {\n    return null;\n  }\n  const styleSheet = getStyleElement();\n  return styleSheet.sheet ? (styleSheet.sheet as CSSStyleSheet) : null;\n}\n\ntype RuleItem = { rule: CSSFontFaceRule; index: number };\n\nfunction getFontFaceRules(): RuleItem[] {\n  const sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    // @ts-ignore: rule iterator\n    const rules = [...sheet.cssRules];\n\n    const items: RuleItem[] = [];\n\n    for (let i = 0; i < rules.length; i++) {\n      const rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({ rule, index: i });\n      }\n    }\n    return items;\n  }\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(\n  fontFamilyName: string,\n  options?: UnloadFontOptions\n): RuleItem[] {\n  const rules = getFontFaceRules();\n  return rules.filter(({ rule }) => {\n    return (\n      rule.style.fontFamily === fontFamilyName &&\n      (options && options.display ? options.display === (rule.style as any).fontDisplay : true)\n    );\n  });\n}\n\nconst serverContext: Set<{ name: string; css: string; resourceId: string }> = new Set();\n\nfunction getHeadElements(): {\n  $$type: string;\n  rel?: string;\n  href?: string;\n  as?: string;\n  crossorigin?: string;\n  children?: string;\n  id?: string;\n  type?: string;\n}[] {\n  const entries = [...serverContext.entries()];\n  if (!entries.length) {\n    return [];\n  }\n  const css = entries.map(([{ css }]) => css).join('\\n');\n  const links = entries.map(([{ resourceId }]) => resourceId);\n  // TODO: Maybe return nothing if no fonts were loaded.\n  return [\n    {\n      $$type: 'style',\n      children: css,\n      id: ID,\n      type: 'text/css',\n    },\n    ...links.map((resourceId) => ({\n      $$type: 'link',\n      rel: 'preload',\n      href: resourceId,\n      as: 'font',\n      crossorigin: '',\n    })),\n  ];\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFontLoader';\n  },\n\n  async unloadAllAsync(): Promise<void> {\n    if (!Platform.isDOMAvailable) return;\n\n    const element = document.getElementById(ID);\n    if (element && element instanceof HTMLStyleElement) {\n      document.removeChild(element);\n    }\n  },\n\n  async unloadAsync(fontFamilyName: string, options?: UnloadFontOptions): Promise<void> {\n    const sheet = getFontFaceStyleSheet();\n    if (!sheet) return;\n    const items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n    for (const item of items) {\n      sheet.deleteRule(item.index);\n    }\n  },\n\n  getServerResources(): string[] {\n    const elements = getHeadElements();\n\n    return elements\n      .map((element) => {\n        switch (element.$$type) {\n          case 'style':\n            return `<style id=\"${element.id}\" type=\"${element.type}\">${element.children}</style>`;\n          case 'link':\n            return `<link rel=\"${element.rel}\" href=\"${element.href}\" as=\"${element.as}\" crossorigin=\"${element.crossorigin}\" />`;\n          default:\n            return '';\n        }\n      })\n      .filter(Boolean);\n  },\n\n  resetServerContext() {\n    serverContext.clear();\n  },\n\n  isLoaded(fontFamilyName: string, resource: UnloadFontOptions = {}): boolean {\n    if (typeof window === 'undefined') {\n      return !![...serverContext.values()].find((asset) => {\n        return asset.name === fontFamilyName;\n      });\n    }\n    return getFontFaceRulesMatchingResource(fontFamilyName, resource)?.length > 0;\n  },\n\n  // NOTE(EvanBacon): No async keyword! This cannot return a promise in Node environments.\n  loadAsync(fontFamilyName: string, resource: FontResource): Promise<void> {\n    if (typeof window === 'undefined') {\n      serverContext.add({\n        name: fontFamilyName,\n        css: _createWebFontTemplate(fontFamilyName, resource),\n        // @ts-expect-error: typeof string\n        resourceId: resource.uri!,\n      });\n      return Promise.resolve();\n    }\n\n    const canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new CodedError(\n        'ERR_WEB_ENVIRONMENT',\n        `The browser's \\`document.head\\` element doesn't support injecting fonts.`\n      );\n    }\n\n    const style = getStyleElement();\n    document.head!.appendChild(style);\n\n    const res = getFontFaceRulesMatchingResource(fontFamilyName, resource);\n    if (!res.length) {\n      _createWebStyle(fontFamilyName, resource);\n    }\n\n    if (!isFontLoadingListenerSupported()) {\n      return Promise.resolve();\n    }\n\n    return new FontObserver(fontFamilyName, { display: resource.display }).load(null, 6000);\n  },\n};\n\nconst ID = 'expo-generated-fonts';\n\nfunction getStyleElement(): HTMLStyleElement {\n  const element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nexport function _createWebFontTemplate(fontFamily: string, resource: FontResource): string {\n  return `@font-face{font-family:${fontFamily};src:url(${resource.uri});font-display:${\n    resource.display || FontDisplay.AUTO\n  }}`;\n}\n\nfunction _createWebStyle(fontFamily: string, resource: FontResource): HTMLStyleElement {\n  const fontStyle = _createWebFontTemplate(fontFamily, resource);\n\n  const styleElement = getStyleElement();\n  // @ts-ignore: TypeScript does not define HTMLStyleElement::styleSheet. This is just for IE and\n  // possibly can be removed if it's unnecessary on IE 11.\n  if (styleElement.styleSheet) {\n    const styleElementIE = styleElement as any;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText\n      ? styleElementIE.styleSheet.cssText + fontStyle\n      : fontStyle;\n  } else {\n    const textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported(): boolean {\n  const { userAgent } = window.navigator;\n  // WebKit is broken https://github.com/bramstein/fontfaceobserver/issues/95\n  const isIOS = !!userAgent.match(/iPad|iPhone/i);\n  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  // Edge is broken https://github.com/bramstein/fontfaceobserver/issues/109#issuecomment-333356795\n  const isEdge = userAgent.includes('Edge');\n  // Internet Explorer\n  const isIE = userAgent.includes('Trident');\n  // Firefox\n  const isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}