{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Platform } from 'expo-modules-core';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nfunction getScaledAssetPath(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var type = !asset.type ? '' : `.${asset.type}`;\n  if (__DEV__) {\n    return asset.httpServerLocation + '/' + asset.name + scaleSuffix + type;\n  } else {\n    return asset.httpServerLocation.replace(/\\.\\.\\//g, '_') + '/' + asset.name + scaleSuffix + type;\n  }\n}\nvar AssetSourceResolver = function () {\n  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {\n    _classCallCheck(this, AssetSourceResolver);\n    this.serverUrl = serverUrl || 'https://expo.dev';\n    this.jsbundleUrl = null;\n    this.asset = asset;\n  }\n  _createClass(AssetSourceResolver, [{\n    key: \"isLoadedFromServer\",\n    value: function isLoadedFromServer() {\n      return true;\n    }\n  }, {\n    key: \"isLoadedFromFileSystem\",\n    value: function isLoadedFromFileSystem() {\n      return false;\n    }\n  }, {\n    key: \"defaultAsset\",\n    value: function defaultAsset() {\n      return this.assetServerURL();\n    }\n  }, {\n    key: \"assetServerURL\",\n    value: function assetServerURL() {\n      var fromUrl = new URL(getScaledAssetPath(this.asset), this.serverUrl);\n      fromUrl.searchParams.set('platform', Platform.OS);\n      fromUrl.searchParams.set('hash', this.asset.hash);\n      return this.fromSource(fromUrl.toString().replace(fromUrl.origin, ''));\n    }\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      var _this$asset$width, _this$asset$height;\n      return {\n        __packager_asset: true,\n        width: (_this$asset$width = this.asset.width) != null ? _this$asset$width : undefined,\n        height: (_this$asset$height = this.asset.height) != null ? _this$asset$height : undefined,\n        uri: source,\n        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())\n      };\n    }\n  }], [{\n    key: \"pickScale\",\n    value: function pickScale(scales, deviceScale) {\n      for (var i = 0; i < scales.length; i++) {\n        if (scales[i] >= deviceScale) {\n          return scales[i];\n        }\n      }\n      return scales[scales.length - 1] || 1;\n    }\n  }]);\n  return AssetSourceResolver;\n}();\nexport { AssetSourceResolver as default };","map":{"version":3,"mappings":";;AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAAC;AAa7C,SAASC,kBAAkB,CAACC,KAAK;EAC/B,IAAMC,KAAK,GAAGC,mBAAmB,CAACC,SAAS,CAACH,KAAK,CAACI,MAAM,EAAEC,UAAU,CAACC,GAAG,EAAE,CAAC;EAC3E,IAAMC,WAAW,GAAGN,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,GAAGA,KAAK,GAAG,GAAG;EACxD,IAAMO,IAAI,GAAG,CAACR,KAAK,CAACQ,IAAI,GAAG,EAAE,GAAG,IAAIR,KAAK,CAACQ,IAAI,EAAE;EAChD,IAAIC,OAAO,EAAE;IACX,OAAOT,KAAK,CAACU,kBAAkB,GAAG,GAAG,GAAGV,KAAK,CAACW,IAAI,GAAGJ,WAAW,GAAGC,IAAI;GACxE,MAAM;IACL,OAAOR,KAAK,CAACU,kBAAkB,CAACE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,GAAG,GAAGZ,KAAK,CAACW,IAAI,GAAGJ,WAAW,GAAGC,IAAI;;AAEnG;AAAC,IAEoBN,mBAAmB;EAQtC,6BACEW,SAAoC,EACpCC,WAAsC,EACtCd,KAAoB;IAAA;IAEpB,IAAI,CAACa,SAAS,GAAGA,SAAS,IAAI,kBAAkB;IAChD,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACd,KAAK,GAAGA,KAAK;EACpB;EAAC;IAAA;IAAA,OAGD,8BAAkB;MAChB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAGD,kCAAsB;MACpB,OAAO,KAAK;IACd;EAAC;IAAA;IAAA,OAED,wBAAY;MACV,OAAO,IAAI,CAACe,cAAc,EAAE;IAC9B;EAAC;IAAA;IAAA,OAKD,0BAAc;MACZ,IAAMC,OAAO,GAAG,IAAIC,GAAG,CAAClB,kBAAkB,CAAC,IAAI,CAACC,KAAK,CAAC,EAAE,IAAI,CAACa,SAAS,CAAC;MACvEG,OAAO,CAACE,YAAY,CAACC,GAAG,CAAC,UAAU,EAAErB,QAAQ,CAACsB,EAAE,CAAC;MACjDJ,OAAO,CAACE,YAAY,CAACC,GAAG,CAAC,MAAM,EAAE,IAAI,CAACnB,KAAK,CAACqB,IAAI,CAAC;MACjD,OAAO,IAAI,CAACC,UAAU,CAEpBN,OAAO,CAACO,QAAQ,EAAE,CAACX,OAAO,CAACI,OAAO,CAACQ,MAAM,EAAE,EAAE,CAAC,CAC/C;IACH;EAAC;IAAA;IAAA,OAED,oBAAWC,MAAc;MAAA;MACvB,OAAO;QACLC,gBAAgB,EAAE,IAAI;QACtBC,KAAK,uBAAE,IAAI,CAAC3B,KAAK,CAAC2B,KAAK,gCAAIC,SAAS;QACpCC,MAAM,wBAAE,IAAI,CAAC7B,KAAK,CAAC6B,MAAM,iCAAID,SAAS;QACtCE,GAAG,EAAEL,MAAM;QACXxB,KAAK,EAAEC,mBAAmB,CAACC,SAAS,CAAC,IAAI,CAACH,KAAK,CAACI,MAAM,EAAEC,UAAU,CAACC,GAAG,EAAE;OACzE;IACH;EAAC;IAAA;IAAA,OAED,mBAAiBF,MAAgB,EAAE2B,WAAmB;MACpD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,MAAM,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;QACtC,IAAI5B,MAAM,CAAC4B,CAAC,CAAC,IAAID,WAAW,EAAE;UAC5B,OAAO3B,MAAM,CAAC4B,CAAC,CAAC;;;MAGpB,OAAO5B,MAAM,CAACA,MAAM,CAAC6B,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;IACvC;EAAC;EAAA;AAAA;AAAA,SA9DkB/B,mBAAmB","names":["Platform","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","PixelRatio","get","scaleSuffix","type","__DEV__","httpServerLocation","name","replace","serverUrl","jsbundleUrl","assetServerURL","fromUrl","URL","searchParams","set","OS","hash","fromSource","toString","origin","source","__packager_asset","width","undefined","height","uri","deviceScale","i","length"],"sources":["/Users/eloygomezgarcia/Desktop/PERSONAL/UNI/TFG/CODIGO/FRONT/node_modules/expo-asset/src/AssetSourceResolver.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { PixelRatio } from 'react-native';\nimport { PackagerAsset } from 'react-native/Libraries/Image/AssetRegistry';\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean;\n  width?: number;\n  height?: number;\n  uri: string;\n  scale: number;\n};\n\n// Returns the Metro dev server-specific asset location.\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const type = !asset.type ? '' : `.${asset.type}`;\n  if (__DEV__) {\n    return asset.httpServerLocation + '/' + asset.name + scaleSuffix + type;\n  } else {\n    return asset.httpServerLocation.replace(/\\.\\.\\//g, '_') + '/' + asset.name + scaleSuffix + type;\n  }\n}\n\nexport default class AssetSourceResolver {\n  serverUrl: string;\n  // where the jsbundle is being run from\n  // NOTE(EvanBacon): Never defined on web.\n  jsbundleUrl?: string | null;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(\n    serverUrl: string | undefined | null,\n    jsbundleUrl: string | undefined | null,\n    asset: PackagerAsset\n  ) {\n    this.serverUrl = serverUrl || 'https://expo.dev';\n    this.jsbundleUrl = null;\n    this.asset = asset;\n  }\n\n  // Always true for web runtimes\n  isLoadedFromServer(): boolean {\n    return true;\n  }\n\n  // Always false for web runtimes\n  isLoadedFromFileSystem(): boolean {\n    return false;\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    return this.assetServerURL();\n  }\n\n  /**\n   * @returns absolute remote URL for the hosted asset.\n   */\n  assetServerURL(): ResolvedAssetSource {\n    const fromUrl = new URL(getScaledAssetPath(this.asset), this.serverUrl);\n    fromUrl.searchParams.set('platform', Platform.OS);\n    fromUrl.searchParams.set('hash', this.asset.hash);\n    return this.fromSource(\n      // Relative on web\n      fromUrl.toString().replace(fromUrl.origin, '')\n    );\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width ?? undefined,\n      height: this.asset.height ?? undefined,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: number[], deviceScale: number): number {\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n    return scales[scales.length - 1] || 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}