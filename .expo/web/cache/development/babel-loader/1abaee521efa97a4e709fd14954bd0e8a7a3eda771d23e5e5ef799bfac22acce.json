{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font.types\";\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName } from \"./FontLoader\";\nimport { loaded, loadPromises } from \"./memory\";\nimport { registerStaticFont } from \"./server\";\nexport function processFontFamily(fontFamily) {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);\n      } else {\n        console.warn(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`);\n      }\n    }\n  }\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\nexport function isLoaded(fontFamily) {\n  var _ExpoFontLoader$custo;\n  if (Platform.OS === 'web') {\n    return fontFamily in loaded || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return fontFamily in loaded || ((_ExpoFontLoader$custo = ExpoFontLoader.customNativeFonts) == null ? void 0 : _ExpoFontLoader$custo.includes(fontFamily));\n}\nexport function isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\nexport function loadAsync(fontFamilyOrFontMap, source) {\n  var isServer = Platform.OS === 'web' && typeof window === 'undefined';\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n    }\n    var fontMap = fontFamilyOrFontMap;\n    var names = Object.keys(fontMap);\n    if (isServer) {\n      names.map(function (name) {\n        return registerStaticFont(name, fontMap[name]);\n      });\n      return Promise.resolve();\n    }\n    return Promise.all(names.map(function (name) {\n      return loadFontInNamespaceAsync(name, fontMap[name]);\n    })).then(function () {});\n  }\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\nfunction loadFontInNamespaceAsync(_x, _x2) {\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction _loadFontInNamespaceAsync() {\n  _loadFontInNamespaceAsync = _asyncToGenerator(function* (fontFamily, source) {\n    if (!source) {\n      throw new CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n    }\n    if (loaded[fontFamily]) {\n      return;\n    }\n    if (loadPromises.hasOwnProperty(fontFamily)) {\n      return loadPromises[fontFamily];\n    }\n    var asset = getAssetForSource(source);\n    loadPromises[fontFamily] = _asyncToGenerator(function* () {\n      try {\n        yield loadSingleFontAsync(fontFamily, asset);\n        loaded[fontFamily] = true;\n      } finally {\n        delete loadPromises[fontFamily];\n      }\n    })();\n    yield loadPromises[fontFamily];\n  });\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\nexport function unloadAllAsync() {\n  return _unloadAllAsync.apply(this, arguments);\n}\nfunction _unloadAllAsync() {\n  _unloadAllAsync = _asyncToGenerator(function* () {\n    if (!ExpoFontLoader.unloadAllAsync) {\n      throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n    }\n    if (Object.keys(loadPromises).length) {\n      throw new CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);\n    }\n    for (var fontFamily of Object.keys(loaded)) {\n      delete loaded[fontFamily];\n    }\n    yield ExpoFontLoader.unloadAllAsync();\n  });\n  return _unloadAllAsync.apply(this, arguments);\n}\nexport function unloadAsync(_x3, _x4) {\n  return _unloadAsync.apply(this, arguments);\n}\nfunction _unloadAsync() {\n  _unloadAsync = _asyncToGenerator(function* (fontFamilyOrFontMap, options) {\n    if (!ExpoFontLoader.unloadAsync) {\n      throw new UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (options) {\n        throw new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      yield Promise.all(names.map(function (name) {\n        return unloadFontInNamespaceAsync(name, fontMap[name]);\n      }));\n      return;\n    }\n    return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n  });\n  return _unloadAsync.apply(this, arguments);\n}\nfunction unloadFontInNamespaceAsync(_x5, _x6) {\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction _unloadFontInNamespaceAsync() {\n  _unloadFontInNamespaceAsync = _asyncToGenerator(function* (fontFamily, options) {\n    if (!loaded[fontFamily]) {\n      return;\n    } else {\n      delete loaded[fontFamily];\n    }\n    var nativeFontName = getNativeFontName(fontFamily);\n    if (!nativeFontName) {\n      throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n    }\n    yield ExpoFontLoader.unloadAsync(nativeFontName, options);\n  });\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}\nexport { FontDisplay };","map":{"version":3,"mappings":"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","names":["CodedError","Platform","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","registerStaticFont","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","warn","OS","customNativeFonts","includes","loadAsync","fontFamilyOrFontMap","source","isServer","window","Promise","reject","fontMap","names","Object","keys","map","name","resolve","all","loadFontInNamespaceAsync","then","hasOwnProperty","asset","unloadAllAsync","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sources":["/Users/eloygomezgarcia/Desktop/PERSONAL/UNI/TFG/CODIGO/FRONT/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\nimport { loaded, loadPromises } from './memory';\nimport { registerStaticFont } from './server';\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.warn(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`\n        );\n      }\n    }\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  if (Platform.OS === 'web') {\n    return fontFamily in loaded || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return fontFamily in loaded || ExpoFontLoader.customNativeFonts?.includes(fontFamily);\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n  // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n  // standard Expo SDK style guide.\n  const isServer = Platform.OS === 'web' && typeof window === 'undefined';\n\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(\n        new CodedError(\n          `ERR_FONT_API`,\n          `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n        )\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n\n    if (isServer) {\n      names.map((name) => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n\n    return Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name]))).then(\n      () => {}\n    );\n  }\n\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}