{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { loadAsync, isLoaded } from \"./Font\";\nfunction isMapLoaded(map) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every(function (fontFamily) {\n      return isLoaded(fontFamily);\n    });\n  }\n}\nfunction useRuntimeFonts(map) {\n  var _useState = useState(isMapLoaded(map)),\n    _useState2 = _slicedToArray(_useState, 2),\n    loaded = _useState2[0],\n    setLoaded = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  useEffect(function () {\n    loadAsync(map).then(function () {\n      return setLoaded(true);\n    }).catch(setError);\n  }, []);\n  return [loaded, error];\n}\nfunction useStaticFonts(map) {\n  loadAsync(map);\n  return [true, null];\n}\nexport var useFonts = typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,SAAS,EAAEC,QAAQ;AAG5B,SAASC,WAAW,CAACC,GAAwC;EAC3D,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOF,QAAQ,CAACE,GAAG,CAAC;GACrB,MAAM;IACL,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,KAAK,CAAC,UAACC,UAAU;MAAA,OAAKN,QAAQ,CAACM,UAAU,CAAC;IAAA,EAAC;;AAEvE;AAEA,SAASC,eAAe,CAACL,GAAwC;EAC/D,gBAA4BJ,QAAQ,CAGlCG,WAAW,CAACC,GAAG,CAAC,CACjB;IAAA;IAJMM,MAAM;IAAEC,SAAS;EAKxB,iBAA0BX,QAAQ,CAAe,IAAI,CAAC;IAAA;IAA/CY,KAAK;IAAEC,QAAQ;EAEtBd,SAAS,CAAC,YAAK;IACbE,SAAS,CAACG,GAAG,CAAC,CACXU,IAAI,CAAC;MAAA,OAAMH,SAAS,CAAC,IAAI,CAAC;IAAA,EAAC,CAC3BI,KAAK,CAACF,QAAQ,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACH,MAAM,EAAEE,KAAK,CAAC;AACxB;AAEA,SAASI,cAAc,CAACZ,GAAwC;EAC9DH,SAAS,CAACG,GAAG,CAAC;EACd,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AACrB;AAoBA,OAAO,IAAMa,QAAQ,GACnB,OAAOC,MAAM,KAAK,WAAW,GAAGF,cAAc,GAAGP,eAAe","names":["useEffect","useState","loadAsync","isLoaded","isMapLoaded","map","Object","keys","every","fontFamily","useRuntimeFonts","loaded","setLoaded","error","setError","then","catch","useStaticFonts","useFonts","window"],"sources":["/Users/eloygomezgarcia/Desktop/PERSONAL/UNI/TFG/CODIGO/FRONT/node_modules/expo-font/src/FontHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync, isLoaded } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  loadAsync(map);\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * ```ts\n * const [loaded, error] = useFonts({ ... });\n * ```\n * Load a map of fonts with [`loadAsync`](#loadasync). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n */\nexport const useFonts: (map: string | Record<string, FontSource>) => [boolean, Error | null] =\n  typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}